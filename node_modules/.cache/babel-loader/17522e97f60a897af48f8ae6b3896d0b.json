{"ast":null,"code":"var _jsxFileName = \"/home/rahul/Projects/auction/ipl-auction/src/container/LiveBidding.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport { db } from \"../config/Firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LiveBidding = ({\n  auth\n}) => {\n  _s();\n\n  const [playerCard, setPlayerCard] = useState({\n    Batavg: \"\",\n    Image: \"\",\n    Runs: \"\",\n    age: \"\",\n    baseprice: \"\",\n    class: \"\",\n    display: Boolean,\n    maxbid: 0,\n    maxbidBy: \"\",\n    name: \"\",\n    strikerate: \"\"\n  });\n\n  const fetchsome = () => {\n    db.collection(\"players\").where(\"display\", \"==\", \"true\").get().then(snapshot => {\n      snapshot.forEach(doc => {\n        console.log(doc.id);\n      });\n    }).catch(error => {\n      console.log(\"Could not fetch\");\n    });\n  };\n\n  const fetchCard = () => {\n    db.collection(\"players\").onSnapshot(snapshot => {\n      const result = snapshot.docs.map(doc => ({\n        id: doc.id,\n        data: doc.data()\n      }));\n      result.map(res => {\n        console.log(res.data.display);\n\n        if (res.data.display === true) {\n          console.log(res.data);\n          console.log(res.data.name);\n          setPlayerCard({\n            Batavg: res.data.Batavg,\n            Image: res.data.Image,\n            Runs: res.data.Runs,\n            age: res.data.age,\n            baseprice: res.data.baseprice,\n            class: res.data.class,\n            display: res.data.display,\n            maxbid: res.data.maxbid,\n            maxbidBy: res.data.maxbidBy,\n            name: res.data.name,\n            strikerate: res.data.strikerate\n          });\n        }\n      });\n      console.log(playerCard);\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"Working....\");\n    fetchCard();\n  }, []);\n  /* if (!auth.uid) return <Redirect to=\"/signin\" />; */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Live Bidding\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LiveBidding, \"iJeScKWzkr8EzHWlw8EvjNFKH0g=\");\n\n_c = LiveBidding;\n\nconst mapStateToProps = state => {\n  return {\n    authError: state.auth.authError,\n    auth: state.firebase.auth\n  };\n};\n/* const mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (creds) => dispatch(signIn(creds)),\n  };\n}; */\n\n\nexport default connect(mapStateToProps)(LiveBidding);\n\nvar _c;\n\n$RefreshReg$(_c, \"LiveBidding\");","map":{"version":3,"sources":["/home/rahul/Projects/auction/ipl-auction/src/container/LiveBidding.js"],"names":["React","useEffect","useState","connect","Redirect","db","LiveBidding","auth","playerCard","setPlayerCard","Batavg","Image","Runs","age","baseprice","class","display","Boolean","maxbid","maxbidBy","name","strikerate","fetchsome","collection","where","get","then","snapshot","forEach","doc","console","log","id","catch","error","fetchCard","onSnapshot","result","docs","map","data","res","mapStateToProps","state","authError","firebase"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport { db } from \"../config/Firebase\";\n\nconst LiveBidding = ({ auth }) => {\n  const [playerCard, setPlayerCard] = useState({\n    Batavg: \"\",\n    Image: \"\",\n    Runs: \"\",\n    age: \"\",\n    baseprice: \"\",\n    class: \"\",\n    display: Boolean,\n    maxbid: 0,\n    maxbidBy: \"\",\n    name: \"\",\n    strikerate: \"\",\n  });\n\n  const fetchsome = () => {\n    db.collection(\"players\")\n      .where(\"display\", \"==\", \"true\")\n      .get()\n      .then((snapshot) => {\n        snapshot.forEach((doc) => {\n          console.log(doc.id);\n        });\n      })\n      .catch((error) => {\n        console.log(\"Could not fetch\");\n      });\n  };\n\n  const fetchCard = () => {\n    db.collection(\"players\").onSnapshot((snapshot) => {\n      const result = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        data: doc.data(),\n      }));\n      result.map((res) => {\n        console.log(res.data.display);\n        if (res.data.display === true) {\n          console.log(res.data);\n          console.log(res.data.name);\n          setPlayerCard({\n            Batavg: res.data.Batavg,\n            Image: res.data.Image,\n            Runs: res.data.Runs,\n            age: res.data.age,\n            baseprice: res.data.baseprice,\n            class: res.data.class,\n            display: res.data.display,\n            maxbid: res.data.maxbid,\n            maxbidBy: res.data.maxbidBy,\n            name: res.data.name,\n            strikerate: res.data.strikerate,\n          });\n        }\n      });\n      console.log(playerCard);\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"Working....\");\n    fetchCard();\n  }, []);\n\n  /* if (!auth.uid) return <Redirect to=\"/signin\" />; */\n  return (\n    <div>\n      <h1>Live Bidding</h1>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    authError: state.auth.authError,\n    auth: state.firebase.auth,\n  };\n};\n\n/* const mapDispatchToProps = (dispatch) => {\n  return {\n    signIn: (creds) => dispatch(signIn(creds)),\n  };\n}; */\n\nexport default connect(mapStateToProps)(LiveBidding);\n"]},"metadata":{},"sourceType":"module"}